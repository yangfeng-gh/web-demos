{"version":3,"sources":["keys.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CAYU,M;8CAgBA,O;;QAzBL,I;;AACL,QAAI,MAAM,EAAE,GAAG,CAAL,EAAQ,GAAG,CAAX,EAAc,GAAG,CAAjB,EAAV;;;;;;;AAEA,wDAAgB,KAAK,GAAL,CAAhB,4GAA2B;AAAA,gBAAlB,GAAkB;;AACvB,oBAAQ,GAAR,CAAY,GAAZ,EADuB,CACL;AACrB;;AAED;AACA;;;;;;;;;;;;;;;;AACA,aAAU,MAAV,CAAiB,GAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEACoB,oBAAY,GAAZ,CADpB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACa,4BADb;AAAA;AAAA,+BAEc,CAAC,IAAI,IAAJ,CAAD,CAFd;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA,aAAS,MAAT,CAAgB,GAAhB,EAAqB;AACjB,YAAI,MAAM,EAAV;AADiB;AAAA;AAAA;;AAAA;AAEjB,6DAAgB,oBAAY,GAAZ,CAAhB,iHAAkC;AAAA,oBAAzB,KAAyB;;AAC9B,oBAAI,IAAJ,CAAS,IAAI,KAAJ,CAAT;AACH;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKjB,eAAO,GAAP;AACH;;AAED;AACA;AACA,aAAU,OAAV,CAAkB,GAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEACoB,oBAAY,GAAZ,CADpB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACa,6BADb;AAAA;AAAA,+BAEc,CAAC,KAAD,EAAM,IAAI,KAAJ,CAAN,CAFd;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA;AACA,aAAS,OAAT,CAAiB,GAAjB,EAAsB;AAClB,YAAI,MAAM,EAAV;AADkB;AAAA;AAAA;;AAAA;AAElB,6DAAgB,oBAAY,GAAZ,CAAhB,iHAAkC;AAAA,oBAAzB,KAAyB;;AAC9B,oBAAI,IAAJ,CAAS,CAAC,KAAD,EAAM,IAAI,KAAJ,CAAN,CAAT;AACH;AAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKlB,eAAO,GAAP;AACH;;AAED;;AAEA;;;;;;;;;AAIA,yDAAyB,QAAQ,GAAR,CAAzB,iHAAuC;AAAA;;AAAA;;AAAA,gBAA7B,KAA6B;AAAA,gBAAxB,KAAwB;;AACnC,oBAAQ,GAAR,CAAY,CAAC,KAAD,EAAM,KAAN,CAAZ,EADmC,CACR;AAC9B","file":"keys.js","sourcesContent":["/**\r\n * ES5引入了Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。\r\n */\r\nlet {keys/*, values, entries*/} = Object;\r\nlet obj = { a: 1, b: 2, c: 3 };\r\n\r\nfor (let key of keys(obj)) {\r\n    console.log(key); // 'a', 'b', 'c'\r\n}\r\n\r\n// values()\r\n// Generator函数的版本\r\nfunction* values(obj) {\r\n    for (let key of Object.keys(obj)) {\r\n        yield [obj[key]]\r\n    }\r\n}\r\n// 非Generator函数的版本\r\nfunction values(obj) {\r\n    let arr = [];\r\n    for (let key of Object.keys(obj)) {\r\n        arr.push(obj[key]);\r\n    }\r\n    return arr;\r\n}\r\n\r\n// entries()\r\n// Generator函数的版本\r\nfunction* entries(obj) {\r\n    for (let key of Object.keys(obj)) {\r\n        yield [key, obj[key]];\r\n    }\r\n}\r\n\r\n// 非Generator函数的版本\r\nfunction entries(obj) {\r\n    let arr = [];\r\n    for (let key of Object.keys(obj)) {\r\n        arr.push([key, obj[key]]);\r\n    }\r\n    return arr;\r\n}\r\n\r\n// ES7有一个提案，引入了跟Object.keys配套的Object.values和Object.entries。\r\n\r\n/*for (let value of values(obj)) {\r\n    console.log(value); // 1, 2, 3\r\n}*/\r\n\r\nfor (let [key, value] of entries(obj)) {\r\n    console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3]\r\n}\r\n\r\n\r\n"]}