{"version":3,"sources":["assign.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA;AACE,QAAI,SAAS,EAAC,GAAG,CAAJ,EAAb;;AAEA,QAAI,UAAU,EAAC,GAAG,CAAJ,EAAd;AACA,QAAI,UAAU,EAAC,GAAG,CAAJ,EAAd;;AAEA,0BAAc,MAAd,EAAsB,OAAtB,EAA+B,OAA/B;AACA,YAAQ,GAAR,CAAY,MAAZ;AACD;;AAGD;AACA;AACE,QAAI,UAAS,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAb;;AAEA,QAAI,UAAU,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAd;AACA,QAAI,WAAU,EAAC,GAAG,CAAJ,EAAd;;AAEA,0BAAc,OAAd,EAAsB,OAAtB,EAA+B,QAA/B;AACA,YAAQ,GAAR,CAAY,OAAZ;AACD;;AAED;AACA;AACE,QAAI,MAAM,EAAC,GAAG,CAAJ,EAAV;AACA,0BAAc,GAAd,MAAuB,GAAvB,CAFF,CAE6B;AAC3B,YAAQ,GAAR,CAAY,GAAZ;AACD;;AAED;AACA;AACE,QAAI,OAAM,sBAAc,CAAd,CAAV,CADF,CAC8B;AAC5B,YAAQ,GAAR,QAAmB,IAAnB,uDAAmB,IAAnB;AACD;;AAED;AACA,GAGC;AAFC;AACA;;;AAGF;AACA;AACA;AACA;AACE,QAAI,QAAM,EAAC,GAAG,CAAJ,EAAV;AACA,0BAAc,KAAd,EAAmB,SAAnB,MAAkC,KAAlC,CAFF,CAEwC;AACtC,0BAAc,KAAd,EAAmB,IAAnB,MAA6B,KAA7B,CAHF,CAGmC;AAClC;;AAED;AACA;AACA;AACE,QAAI,KAAK,KAAT;AACA,QAAI,KAAK,IAAT;AACA,QAAI,KAAK,EAAT;;AAEA,QAAI,QAAM,sBAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,CAAV;AACA,YAAQ,GAAR,CAAY,KAAZ,EANF,CAMoB;AACnB;;AAED;AACA;AACA;AACE,QAAI,QAAM,sBAAc,EAAC,GAAG,GAAJ,EAAd,EACR,OAAO,cAAP,CAAsB,EAAtB,EAA0B,WAA1B,EAAuC;AACrC,kBAAY,KADyB;AAErC,aAAO;AAF8B,KAAvC,CADQ,CAAV;AAMA,YAAQ,GAAR,CAAY,KAAZ;AACD;;AAED;AACA;AACE,QAAI,QAAM,sBAAc,EAAC,GAAG,GAAJ,EAAd,oCAA0B,sBAAO,GAAP,CAA1B,EAAwC,GAAxC,EAAV;AACA,YAAQ,GAAR,CAAY,KAAZ;AACD;;AAED;AACA;AACA;AACE,QAAI,OAAO,EAAC,GAAG,EAAC,GAAG,CAAJ,EAAJ,EAAX;AACA,QAAI,OAAO,sBAAc,EAAd,EAAkB,IAAlB,CAAX;;AAEA,SAAK,CAAL,CAAO,CAAP,GAAW,CAAX;AACA,YAAQ,GAAR,CAAY,KAAK,CAAL,CAAO,CAAnB,EALF,CAKwB;AACvB;;AAED;AACA;AACE,QAAI,WAAS,EAAC,GAAG,EAAC,GAAG,GAAJ,EAAS,GAAG,GAAZ,EAAJ,EAAb;AACA,QAAI,SAAS,EAAC,GAAG,EAAC,GAAG,OAAJ,EAAJ,EAAb;AACA,0BAAc,QAAd,EAAsB,MAAtB;AACA,YAAQ,GAAR,CAAY,QAAZ;AACD;;AAED;AACA;AACE,QAAI,QAAM,sBAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAAV;AACA,YAAQ,GAAR,CAAY,KAAZ,EAFF,CAEoB;AACnB;;AAED;AACE;AACA;AACD","file":"assign.js","sourcesContent":["/**\r\n * Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\r\n */\r\n{\r\n  let target = {a: 1};\r\n\r\n  let source1 = {b: 2};\r\n  let source2 = {c: 3};\r\n\r\n  Object.assign(target, source1, source2);\r\n  console.log(target);\r\n}\r\n\r\n\r\n// 如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。\r\n{\r\n  let target = {a: 1, b: 1};\r\n\r\n  let source1 = {b: 2, c: 2};\r\n  let source2 = {c: 3};\r\n\r\n  Object.assign(target, source1, source2);\r\n  console.log(target);\r\n}\r\n\r\n// 如果只有一个参数，Object.assign会直接返回该参数。\r\n{\r\n  let obj = {a: 1};\r\n  Object.assign(obj) === obj // true\r\n  console.log(obj);\r\n}\r\n\r\n// 如果该参数不是对象，则会先转成对象，然后返回。\r\n{\r\n  let obj = Object.assign(2); // \"object\"\r\n  console.log(typeof obj);\r\n}\r\n\r\n// 由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。\r\n{\r\n  // Object.assign(undefined) // 报错\r\n  // Object.assign(null) // 报错\r\n}\r\n\r\n// 如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。\r\n// 首先，这些参数都会转成对象，如果无法转成对象，就会跳过。\r\n// 这意味着，如果undefined和null不在首参数，就不会报错。\r\n{\r\n  let obj = {a: 1};\r\n  Object.assign(obj, undefined) === obj // true\r\n  Object.assign(obj, null) === obj // true\r\n}\r\n\r\n// 其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。\r\n// 但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。\r\n{\r\n  let v1 = 'abc';\r\n  let v2 = true;\r\n  let v3 = 10;\r\n\r\n  let obj = Object.assign({}, v1, v2, v3);\r\n  console.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\r\n}\r\n\r\n// Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），\r\n// 也不拷贝不可枚举的属性（enumerable: false）。\r\n{\r\n  let obj = Object.assign({b: 'c'},\r\n    Object.defineProperty({}, 'invisible', {\r\n      enumerable: false,\r\n      value: 'hello'\r\n    })\r\n  );\r\n  console.log(obj);\r\n}\r\n\r\n// 属性名为Symbol值的属性，也会被Object.assign拷贝。\r\n{\r\n  let obj = Object.assign({a: 'b'}, {[Symbol('c')]: 'd'})\r\n  console.log(obj);\r\n}\r\n\r\n// Object.assign方法实行的是浅拷贝，而不是深拷贝。\r\n// 也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。\r\n{\r\n  let obj1 = {a: {b: 1}};\r\n  let obj2 = Object.assign({}, obj1);\r\n\r\n  obj1.a.b = 2;\r\n  console.log(obj2.a.b) // 2\r\n}\r\n\r\n// 对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。\r\n{\r\n  let target = {a: {b: 'c', d: 'e'}}\r\n  let source = {a: {b: 'hello'}}\r\n  Object.assign(target, source)\r\n  console.log(target);\r\n}\r\n\r\n// 注意，Object.assign可以用来处理数组，但是会把数组视为对象。\r\n{\r\n  let obj = Object.assign([1, 2, 3], [4, 5]);\r\n  console.log(obj); // [4, 5, 3]\r\n}\r\n\r\n{\r\n  // let obj = Object.assign(undefined, {a: 1})\r\n  // console.log(obj) // Cannot convert undefined or null to object\r\n}"]}