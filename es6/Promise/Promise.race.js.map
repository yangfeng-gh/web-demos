{"version":3,"sources":["Promise.race.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAMA;AACA,QAAI,IAAI,kBAAQ,IAAR,CAAa,CACjB,MAAM,iCAAN,CADiB,EAEjB,sBAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AACnC,mBAAW;AAAA,mBAAM,OAAO,IAAI,KAAJ,CAAU,iBAAV,CAAP,CAAN;AAAA,SAAX,EAAuD,IAAvD;AACH,KAFD,CAFiB,CAAb,CAAR;AAMA,MAAE,IAAF,CAAO;AAAA,eAAY,QAAQ,GAAR,CAAY,QAAZ,CAAZ;AAAA,KAAP;AACA,MAAE,KAAF,CAAQ;AAAA,eAAS,QAAQ,GAAR,CAAY,KAAZ,CAAT;AAAA,KAAR;;AAEA","file":"Promise.race.js","sourcesContent":["/**\r\n * 将多个Promise实例，包装成一个新的Promise实例。\r\n * 与Promise.all()不同的是：\r\n * 只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。\r\n */\r\n\r\n// 如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。\r\nvar p = Promise.race([\r\n    fetch('/resource-that-may-take-a-while'),\r\n    new Promise(function (resolve, reject) {\r\n        setTimeout(() => reject(new Error('request timeout')), 5000)\r\n    })\r\n])\r\np.then(response => console.log(response))\r\np.catch(error => console.log(error))\r\n\r\n// 上面代码中，如果5秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。\r\n"]}