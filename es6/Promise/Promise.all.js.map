{"version":3,"sources":["Promise.all.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAOA,QAAM,kBAAkB,iBAAxB;;AAEA,QAAM,eAAe,gBAChB,IADgB,CACX,YADW,CAArB;;AAGA,QAAM,cAAc,gBACf,IADe,CACV,cADU,CAApB;;AAGA,sBAAQ,GAAR,CAAY,CACR,YADQ,EAER,WAFQ,CAAZ,EAGG,IAHH,CAGQ;AAAA;AAAA,YAAE,KAAF;AAAA,YAAS,IAAT;;AAAA,eAAmB,uBAAuB,KAAvB,EAA8B,IAA9B,CAAnB;AAAA,KAHR;;AAKA","file":"Promise.all.js","sourcesContent":["/**\r\n * Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例\r\n * p的状态由p1、p2、p3决定，分成两种情况。\r\n * （1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\r\n * （2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\r\n */\r\n\r\nconst databasePromise = connectDatabase();\r\n\r\nconst booksPromise = databaseProimse\r\n    .then(findAllBooks);\r\n\r\nconst userPromise = databasePromise\r\n    .then(getCurrentUser);\r\n\r\nPromise.all([\r\n    booksPromise,\r\n    userPromise\r\n]).then(([books, user]) => pickTopRecommentations(books, user));\r\n\r\n// 上面代码中，booksPromise和userPromise是两个异步操作，只有等到它们的结果都返回了，才会触发pickTopRecommentations这个回调函数。\r\n"]}