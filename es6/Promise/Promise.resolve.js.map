{"version":3,"sources":["Promise.resolve.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA,sBAAQ,OAAR,CAAgB,KAAhB;AACA;AACA,0BAAY;AAAA,eAAW,QAAQ,KAAR,CAAX;AAAA,KAAZ;;AAEA;AACA;AACA,QAAI,IAAI,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACpC,gBAAQ,SAAR;AACH,KAFO,CAAR;AAGA,QAAI,KAAK,kBAAQ,OAAR,CAAgB,CAAhB,CAAT;AACA,YAAQ,GAAR,CAAY,MAAM,EAAlB;;AAEA;AACA;AACA,QAAI,WAAW;AACX,cAAM,cAAS,OAAT,EAAkB,MAAlB,EAA0B;AAC5B,oBAAQ,EAAR;AACH;AAHU,KAAf;AAKA;AACA,QAAI,KAAK,kBAAQ,OAAR,CAAgB,QAAhB,CAAT;AACA,OAAG,IAAH,CAAQ,UAAS,KAAT,EAAgB;AACpB,gBAAQ,GAAR,CAAY,KAAZ,EADoB,CACC;AACxB,KAFD;;AAIA;AACA;AACA;AACA,QAAI,IAAI,kBAAQ,OAAR,CAAgB,OAAhB,CAAR;;AAEA,MAAE,IAAF,CAAO,UAAU,CAAV,EAAY;AACf,gBAAQ,GAAR,CAAY,CAAZ;AACH,KAFD;AAGA;;AAEA;AACA,eAAW,YAAY;AACnB,gBAAQ,GAAR,CAAY,OAAZ;AACH,KAFD,EAEG,CAFH;;AAIA,sBAAQ,OAAR,GAAkB,IAAlB,CAAuB,YAAY;AAC/B,gBAAQ,GAAR,CAAY,KAAZ;AACH,KAFD;;AAIA,YAAQ,GAAR,CAAY,KAAZ;AACA;AACA;AACA","file":"Promise.resolve.js","sourcesContent":["/**\r\n * 将现有对象转为Promise对象\r\n */\r\n\r\nPromise.resolve('foo')\r\n// 等价于\r\nnew Promise(resolve => resolve('foo'));\r\n\r\n// （1）参数是一个Promise实例\r\n// 如果参数是Promise实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。\r\nvar p = new Promise((resolve, reject)=> {\r\n    resolve('success');\r\n});\r\nvar p2 = Promise.resolve(p);\r\nconsole.log(p === p2);\r\n\r\n// （2）参数是一个thenable对象\r\n// thenable对象指的是具有then方法的对象\r\nlet thenable = {\r\n    then: function(resolve, reject) {\r\n        resolve(42);\r\n    }\r\n};\r\n// Promise.resolve方法会将这个对象转为Promise对象，然后就立即执行thenable对象的then方法\r\nlet p1 = Promise.resolve(thenable);\r\np1.then(function(value) {\r\n    console.log(value);  // 42\r\n});\r\n\r\n// （3）参数不是具有then方法的对象，或根本就不是对象\r\n// 如果参数是一个原始值，或者是一个不具有then方法的对象，\r\n// 则Promise.resolve方法返回一个新的Promise对象，状态为Resolved。\r\nvar p = Promise.resolve('Hello');\r\n\r\np.then(function (s){\r\n    console.log(s)\r\n});\r\n// Hello\r\n\r\n// （4）不带有任何参数\r\nsetTimeout(function () {\r\n    console.log('three');\r\n}, 0);\r\n\r\nPromise.resolve().then(function () {\r\n    console.log('two');\r\n});\r\n\r\nconsole.log('one');\r\n// 上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，\r\n// Promise.resolve()在本轮“事件循环”结束时执行，\r\n// console.log(’one‘)则是立即执行，因此最先输出。"]}