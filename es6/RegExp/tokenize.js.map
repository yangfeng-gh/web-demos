{"version":3,"sources":["tokenize.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA,QAAM,iDAAN;AACA,QAAM,UAAW,oBAAjB;;AAEA,aAAS,OAAT,EAAkB,OAAlB;AACA;AACA,aAAS,OAAT,EAAkB,OAAlB;AACA;;AAEA,aAAS,QAAT,CAAkB,WAAlB,EAA+B,GAA/B,EAAoC;AAChC,YAAI,SAAS,EAAb;AACA,YAAI,cAAJ;AACA,eAAO,QAAQ,YAAY,IAAZ,CAAiB,GAAjB,CAAf,EAAsC;AAClC,mBAAO,IAAP,CAAY,MAAM,CAAN,CAAZ;AACH;AACD,eAAO,MAAP;AACH;;AAED,YAAQ,GAAR,CAAY,SAAS,OAAT,EAAkB,QAAlB,CAAZ;AACA;AACA,YAAQ,GAAR,CAAY,SAAS,OAAT,EAAkB,QAAlB,CAAZ;AACA;AACA;;;AAGA;AACA,QAAI,+BAAJ;AACA,YAAQ,GAAR,CAAY,EAAE,MAAd,E,CAAwB;;;AAGxB;AACA;AACA;AACA,YAAQ,GAAR,CAAY,QAAQ,MAApB;AACA;;AAEA;AACA;AACA,YAAQ,GAAR,CAAY,QAAQ,KAApB;AACA;;AAEA;AACA,YAAQ,GAAR,CAAY,sBAAc,qBAAd,CAAZ;AACA;;AAEA,YAAQ,GAAR,CAAY,sBAAc,mCAAd,CAAZ;AACA;;AAEA,YAAQ,GAAR,CAAY,sBAAc,OAAd,CAAZ;AACA","file":"tokenize.js","sourcesContent":["/**\r\n * Created by yvan on 2016-06-30.\r\n */\r\n\r\nconst TOKEN_Y = /\\s*(\\+|[0-9]+)\\s*/y;\r\nconst TOKEN_G  = /\\s*(\\+|[0-9]+)\\s*/g;\r\n\r\ntokenize(TOKEN_Y, '3 + 4')\r\n// [ '3', '+', '4' ]\r\ntokenize(TOKEN_G, '3 + 4')\r\n// [ '3', '+', '4' ]\r\n\r\nfunction tokenize(TOKEN_REGEX, str) {\r\n    let result = [];\r\n    let match;\r\n    while (match = TOKEN_REGEX.exec(str)) {\r\n        result.push(match[1]);\r\n    }\r\n    return result;\r\n}\r\n\r\nconsole.log(tokenize(TOKEN_Y, '3x + 4'));\r\n// [ '3' ]\r\nconsole.log(tokenize(TOKEN_G, '3x + 4'));\r\n// [ '3', '+', '4' ]\r\n// 上面代码中，g修饰符会忽略非法字符，而y修饰符不会，这样就很容易发现错误。\r\n\r\n\r\n// sticky属性\r\nvar r = /hello\\d/y;\r\nconsole.log(r.sticky);  // true\r\n\r\n\r\n// flag属性\r\n// ES5的source属性\r\n// 返回正则表达式的正文\r\nconsole.log(/abc/ig.source);\r\n// \"abc\"\r\n\r\n// ES6的flags属性\r\n// 返回正则表达式的修饰符\r\nconsole.log(/abc/ig.flags);\r\n// 'gi'\r\n\r\n// RegExp.escape()\r\nconsole.log(RegExp.escape('The Quick Brown Fox'));\r\n// \"The Quick Brown Fox\"\r\n\r\nconsole.log(RegExp.escape('Buy it. use it. break it. fix it.'));\r\n// \"Buy it\\. use it\\. break it\\. fix it\\.\"\r\n\r\nconsole.log(RegExp.escape('(*.*)'));\r\n// \"\\(\\*\\.\\*\\)\""]}