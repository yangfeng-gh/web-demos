{"version":3,"sources":["u修饰符.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;AAKA,UAAQ,GAAR,CAAY,gCAAU,IAAV,CAAe,cAAf,CAAZ,E,CAA6C;AAC7C,UAAQ,GAAR,CAAY,SAAS,IAAT,CAAc,cAAd,CAAZ,E,CAA4C;;AAE5C;AACA;AACA,MAAI,IAAI,IAAR;;AAEA,UAAQ,GAAR,CAAY,MAAM,IAAN,CAAW,CAAX,CAAZ,E,CAA2B;AAC3B,UAAQ,GAAR,CAAY,mKAAO,IAAP,CAAY,CAAZ,CAAZ,E,CAA4B;;AAE5B;AACA;AACA,UAAQ,GAAR,CAAY,SAAS,IAAT,CAAc,GAAd,CAAZ,E,CAAgC;AAChC,UAAQ,GAAR,CAAY,IAAU,IAAV,CAAe,GAAf,CAAZ,E,CAAiC;AACjC,UAAQ,GAAR,CAAY,mBAAa,IAAb,CAAkB,IAAlB,CAAZ,E,CAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,WAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC3B,QAAI,SAAS,KAAK,KAAL,CAAW,uIAAX,CAAb;AACA,WAAO,SAAS,OAAO,MAAhB,GAAyB,CAAhC;AACH;;AAED,MAAI,IAAI,MAAR;;AAEA,UAAQ,GAAR,CAAY,EAAE,MAAd,E,CAAsB;AACtB,UAAQ,GAAR,CAAY,gBAAgB,CAAhB,CAAZ,E,CAAgC;;AAEhC,MAAI,IAAI,QAAR;AACA,MAAI,KAAK,EAAE,KAAF,CAAQ,IAAR,CAAT;AACA,UAAQ,GAAR,CAAY,CAAZ;AACA,UAAQ,GAAR,CAAY,EAAZ","file":"u修饰符.js","sourcesContent":["/**\r\n * ES6对正则表达式添加了u修饰符，含义为“Unicode模式”，用来正确处理大于\\uFFFF的Unicode字符。\r\n * 也就是说，会正确处理四个字节的UTF-16编码。\r\n */\r\n\r\nconsole.log(/\\uD83D/u.test('\\uD83D\\uDC2A')); //false\r\nconsole.log(/\\uD83D/.test('\\uD83D\\uDC2A')); //true\r\n\r\n// （1）点字符\r\n// 点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于0xFFFF的Unicode字符，点字符不能识别，必须加上u修饰符。\r\nvar s = '𠮷';\r\n\r\nconsole.log(/^.$/.test(s)) // false\r\nconsole.log(/^.$/u.test(s)) // true\r\n\r\n// （2）Unicode字符表示法\r\n// ES6新增了使用大括号表示Unicode字符，这种表示法在正则表达式中必须加上u修饰符，才能识别。\r\nconsole.log(/\\u{61}/.test('a')) // false\r\nconsole.log(/\\u{61}/u.test('a')) // true\r\nconsole.log(/\\u{20BB7}/u.test('𠮷')) // true\r\n\r\n// （3）量词\r\n// 使用u修饰符后，所有量词都会正确识别码点大于0xFFFF的Unicode字符。\r\n// /a{2}/.test('aa') // true\r\n// /a{2}/u.test('aa') // true\r\n// /𠮷{2}/.test('𠮷𠮷') // false\r\n// /𠮷{2}/u.test('𠮷𠮷') // true\r\n\r\n// /^\\u{3}$/.test('uuu') // true\r\n// 上面代码中，由于正则表达式没有u修饰符，所以大括号被解读为量词。加上u修饰符，就会被解读为Unicode表达式。\r\n\r\n// （4）预定义模式\r\n// u修饰符也影响到预定义模式，能否正确识别码点大于0xFFFF的Unicode字符。\r\n// /^\\S$/.test('𠮷') // false\r\n// /^\\S$/u.test('𠮷') // true\r\n\r\nfunction codePointLength(text) {\r\n    var result = text.match(/[\\s\\S]/gu);\r\n    return result ? result.length : 0;\r\n}\r\n\r\nvar s = '𠮷𠮷';\r\n\r\nconsole.log(s.length) // 4\r\nconsole.log(codePointLength(s)) // 2\r\n\r\nvar s = 'a b\\nc';\r\nvar s2 = s.match(/\\s/);\r\nconsole.log(s);\r\nconsole.log(s2);"]}