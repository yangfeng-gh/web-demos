{"version":3,"sources":["iterator.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAgBU,G;;AAhBV;;;;;AAKA,MAAI,aAAa,EAAjB;AACA,8DAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACtB,CADsB;;AAAA;AAAA;AAAA,mBAEtB,CAFsB;;AAAA;AAAA;AAAA,mBAGtB,CAHsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;AAKA,UAAQ,GAAR,4CAAgB,UAAhB;;AAEA;;;AAGA,WAAU,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,MAAI,IAAI,KAAR;AACA,UAAQ,GAAR,CAAY,kCAAyB,CAArC","file":"iterator.js","sourcesContent":["/**\r\n * 任意一个对象的Symbol.iterator方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象\r\n * 由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的Symbol.iterator属性，\r\n * 从而使得该对象具有 Iterator 接口\r\n */\r\nvar myIterator = {};\r\nmyIterator[Symbol.iterator] = function* () {\r\n  yield 1;\r\n  yield 2;\r\n  yield 3;\r\n};\r\nconsole.log([...myIterator]);\r\n\r\n/**\r\n * Generator 函数执行后，返回一个遍历器对象。该对象本身也具有Symbol.iterator属性，执行后返回自身。\r\n */\r\nfunction* gen() {\r\n\r\n}\r\nvar g = gen()\r\nconsole.log(g[Symbol.iterator]() === g)"]}