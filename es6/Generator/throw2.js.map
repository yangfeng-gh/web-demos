{"version":3,"sources":["throw2.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,QAAI,+BAAI,SAAJ,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA,6BACG,IADH;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKI,gCAAQ,GAAR,CAAY,MAAZ,EAAoB,YAAE,OAAtB;;AALJ,8BAMQ,YAAE,OAAF,IAAa,GANrB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAJ,CAAI;AAAA,KAAJ,CAAJ;;AAWA,QAAI,IAAI,GAAR;AACA,MAAE,IAAF;;AAEA,QAAI;AACA;AACA,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN,CAFA,CAEsB;AACtB,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACH,KAJD,CAIE,OAAO,CAAP,EAAU;AACR,gBAAQ,GAAR,CAAY,MAAZ,EAAoB,EAAE,OAAtB;AACH;AACD","file":"throw2.js","sourcesContent":["/**\r\n * 不要混淆遍历器对象的throw方法和全局的throw命令。全局的throw命令只能被函数体外的catch语句捕获。\r\n */\r\nvar g = function* () {\r\n    while (true) {\r\n        try {\r\n            yield;\r\n        } catch (e) {\r\n            console.log('内部捕获', e.message);\r\n            if (e.message != 'a') throw e;\r\n        }\r\n    }\r\n};\r\n\r\nvar i = g();\r\ni.next();\r\n\r\ntry {\r\n    // i.throw(new Error('a'));\r\n    throw new Error('a'); // 全局的throw命令不会被generator函数内部的try...catch捕获\r\n    throw new Error('b');\r\n} catch (e) {\r\n    console.log('外部捕获', e.message);\r\n}\r\n// 外部捕获 [Error: a]"]}