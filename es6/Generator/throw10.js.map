{"version":3,"sources":["throw10.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;6CAMU,C;;AANV;;;;;;AAMA,aAAU,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACU,CADV;;AAAA;AAEI,gCAAQ,GAAR,CAAY,uBAAZ;AAFJ,8BAGU,IAAI,KAAJ,CAAU,kBAAV,CAHV;;AAAA;AAAA;AAAA,+BAKU,CALV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,aAAS,GAAT,CAAa,SAAb,EAAwB;AACpB,YAAI,CAAJ;AACA,gBAAQ,GAAR,CAAY,oBAAZ;AACA,YAAI;AACA,gBAAI,UAAU,IAAV,EAAJ;AACA,oBAAQ,GAAR,CAAY,aAAZ,EAA2B,CAA3B;AACH,SAHD,CAGE,OAAO,GAAP,EAAY;AACV,oBAAQ,GAAR,CAAY,MAAZ,EAAoB,CAApB;AACH;AACD,YAAI;AACA,gBAAI,UAAU,IAAV,EAAJ;AACA,oBAAQ,GAAR,CAAY,aAAZ,EAA2B,CAA3B;AACH,SAHD,CAGE,OAAO,GAAP,EAAY;AACV,oBAAQ,GAAR,CAAY,MAAZ,EAAoB,CAApB;AACH;AACD,YAAI;AACA,gBAAI,UAAU,IAAV,EAAJ;AACA,oBAAQ,GAAR,CAAY,aAAZ,EAA2B,CAA3B;AACH,SAHD,CAGE,OAAO,GAAP,EAAY;AACV,oBAAQ,GAAR,CAAY,MAAZ,EAAoB,CAApB;AACH;AACD,gBAAQ,GAAR,CAAY,aAAZ;AACH;;AAED,QAAI,GAAJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"throw10.js","sourcesContent":["/**\r\n * 一旦Generator执行过程中抛出错误，且没有被内部捕获，就不会再执行下去了。\r\n * 如果此后还调用next方法，将返回一个value属性等于undefined、done属性等于true的对象，\r\n * 即JavaScript引擎认为这个Generator已经运行结束了。\r\n */\r\n\r\nfunction* g() {\r\n    yield 1;\r\n    console.log('throwing an exception');\r\n    throw new Error('generator broke!');\r\n    yield 2;\r\n    yield 3;\r\n}\r\n\r\nfunction log(generator) {\r\n    var v;\r\n    console.log('starting generator');\r\n    try {\r\n        v = generator.next();\r\n        console.log('第一次运行next方法', v);\r\n    } catch (err) {\r\n        console.log('捕捉错误', v);\r\n    }\r\n    try {\r\n        v = generator.next();\r\n        console.log('第二次运行next方法', v);\r\n    } catch (err) {\r\n        console.log('捕捉错误', v);\r\n    }\r\n    try {\r\n        v = generator.next();\r\n        console.log('第三次运行next方法', v);\r\n    } catch (err) {\r\n        console.log('捕捉错误', v);\r\n    }\r\n    console.log('caller done');\r\n}\r\n\r\nlog(g());\r\n// starting generator\r\n// 第一次运行next方法 { value: 1, done: false }\r\n// throwing an exception\r\n// 捕捉错误 { value: 1, done: false }\r\n// 第三次运行next方法 { value: undefined, done: true }\r\n// caller done\r\n\r\n// 上面代码一共三次运行next方法，第二次运行的时候会抛出错误，然后第三次运行的时候，Generator函数就已经结束了，不再执行下去了。"]}