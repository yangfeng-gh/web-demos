{"version":3,"sources":["函数参数默认值与解构赋值结合.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAIA;AACA,aAAS,EAAT,GAAiC;AAAA,uFAAJ,EAAI;AAAA,0BAApB,CAAoB;AAAA,YAApB,CAAoB,0BAAhB,CAAgB;AAAA,0BAAb,CAAa;AAAA,YAAb,CAAa,0BAAT,CAAS;;AAC7B,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACH;;AAED;AACA,aAAS,EAAT,GAAqC;AAAA,wFAAhB,EAAE,GAAG,CAAL,EAAQ,GAAG,CAAX,EAAgB;AAAA,YAAxB,CAAwB,SAAxB,CAAwB;AAAA,YAArB,CAAqB,SAArB,CAAqB;;AACjC,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACH;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAS,CAAT,GAAqB;AAAA,YAAV,CAAU,uEAAN,CAAM;AAAA,YAAH,CAAG;;AACjB,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACH;;AAED,Q,CAAI;AACJ,MAAE,CAAF,E,CAAK;AACL;AACA,MAAE,SAAF,EAAa,CAAb,E,CAAgB;;AAEhB;AACA,aAAS,EAAT,CAAY,CAAZ,EAAyB;AAAA,YAAV,CAAU,uEAAN,CAAM;AAAA,YAAH,CAAG;;AACrB,eAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP;AACH;;AAED,S,CAAK;AACL,OAAG,CAAH,E,CAAM;AACN;AACA,OAAG,CAAH,EAAM,SAAN,EAAiB,CAAjB,E,CAAoB;;AAEpB;AACA,aAAS,GAAT,GAA2B;AAAA,YAAd,CAAc,uEAAV,CAAU;AAAA,YAAP,CAAO,uEAAH,CAAG;;AACvB,gBAAQ,GAAR,CAAY,CAAZ,EAAe,CAAf;AACH;;AAED,QAAI,SAAJ,EAAe,IAAf;AACA","file":"函数参数默认值与解构赋值结合.js","sourcesContent":["/**\r\n * 与解构赋值默认值结合使用\r\n */\r\n\r\n// 写法一\r\nfunction m1({x = 0, y = 0} = {}) {\r\n    return [x, y];\r\n}\r\n\r\n// 写法二\r\nfunction m2({x, y} = { x: 0, y: 0 }) {\r\n    return [x, y];\r\n}\r\n\r\n// 上面两种写法都对函数的参数设定了默认值，区别是：\r\n// 写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；\r\n// 写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。\r\n\r\n// 通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。\r\n// 如果非尾部的参数设置默认值，实际上这个参数是没法省略的。\r\n// 例一\r\nfunction f(x = 1, y) {\r\n    return [x, y];\r\n}\r\n\r\nf() // [1, undefined]\r\nf(2) // [2, undefined])\r\n// f(, 1) // 报错\r\nf(undefined, 1) // [1, 1]\r\n\r\n// 例二\r\nfunction f2(x, y = 5, z) {\r\n    return [x, y, z];\r\n}\r\n\r\nf2() // [undefined, 5, undefined]\r\nf2(1) // [1, 5, undefined]\r\n// f2(1, ,2) // 报错\r\nf2(1, undefined, 2) // [1, 5, 2]\r\n\r\n// 如果传入undefined，将触发该参数等于默认值，null则没有这个效果。\r\nfunction foo(x = 5, y = 6) {\r\n    console.log(x, y);\r\n}\r\n\r\nfoo(undefined, null)\r\n// 5 null"]}