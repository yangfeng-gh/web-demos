{"version":3,"sources":["import.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;AAkBA;AACA;AACA;;AALA;AAfA;;AAEA;AACA;AACA;;;;;;;;;AAiBA,UAAQ,GAAR;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA,aAAW,YAAW;AACpB,YAAQ,GAAR;AACD,GAFD,EAEG,GAFH","file":"import.js","sourcesContent":["// import { 'f' + 'oo' } from 'my_module'; // 报错\r\n\r\n// let module = 'my_module';\r\n// import { foo } from module; // 报错\r\n/*\r\n// 报错\r\nif (x === 1) {\r\n  import { foo } from 'module1';\r\n} else {\r\n  import { foo } from 'module2';\r\n}\r\n*/\r\n\r\nimport 'fs';\r\nimport 'fs';\r\n// 多次重复执行同一句import语句，只会执行一次，而不会执行多次\r\nimport { x } from './export';\r\nimport { y } from './export';\r\n// 虽然x和y在两个语句中加载，但是它们对应的是同一个my_module实例。也就是说，import语句是 Singleton 模式。\r\n// 等同于\r\n// import {x, y} from './export';\r\nconsole.log(x, y);\r\n\r\n// 目前阶段，通过 Babel 转码，CommonJS 模块的require命令和 ES6 模块的import命令，可以写在同一个模块里面，\r\n// 但是最好不要这样做，因为import在静态解析阶段执行，所以它是一个模块之中最早执行的。\r\n// 下面的代码可能不会得到预期结果\r\n// require('core-js/modules/es6.symbol');\r\n// require('core-js/modules/es6.promise');\r\n// import os from 'os';\r\n\r\nimport { foo } from './export'\r\n\r\nsetTimeout(function() {\r\n  console.log(foo)\r\n}, 500);\r\n"]}