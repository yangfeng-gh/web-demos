{"version":3,"sources":["template-string.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAIA;AACA,YAAQ,GAAR;;AAEA;AACA,YAAQ,GAAR;;AAGA,YAAQ,GAAR;;AAGA;AACA,QAAI,OAAO,KAAX;AAAA,QAAkB,OAAO,OAAzB;AACA,YAAQ,GAAR,YAAqB,IAArB,sBAA0C,IAA1C;;AAEA,aAAS,SAAT,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC;AAC7B,YAAI,CAAC,KAAK,YAAL,CAAkB,MAAlB,CAAL,EAAgC;AAC5B,kBAAM,IAAI,KAAJ,WAOM,KAAK,IAPX,iCAO2C,MAP3C,OAAN;AAQH;AACJ;;AAED,QAAI,IAAI,CAAR;AACA,QAAI,IAAI,CAAR;;AAEA,YAAQ,GAAR,CAAe,CAAf,WAAsB,CAAtB,YAA6B,IAAI,CAAjC;AACA;AACA,YAAQ,GAAR,CAAe,CAAf,WAAsB,IAAI,CAA1B,YAAiC,IAAI,IAAI,CAAzC;AACA;;AAEA,QAAI,MAAM,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAV;AACA,YAAQ,GAAR,OAAe,IAAI,CAAJ,GAAQ,IAAI,CAA3B;AACA;;AAEA;AACA,QAAM,OAAO,SAAP,IAAO;AAAA,mCAET,MAAM,GAAN,CAAU;AAAA,sCACA,KAAK,KADL,gCAEA,KAAK,IAFL;AAAA,SAAV,EAGC,IAHD,CAGM,IAHN,CAFS;AAAA,KAAb;;AASA,QAAM,OAAO,CACT,EAAE,OAAO,QAAT,EAAmB,MAAM,MAAzB,EADS,EAET,EAAE,OAAO,MAAT,EAAiB,MAAM,SAAvB,EAFS,CAAb;;AAKA,YAAQ,GAAR,CAAY,KAAK,IAAL,CAAZ;;AAEA;AACA;AACA;AACA;AACA,QAAI,MAAM,YAAY,kBAAtB;AACA,QAAI,OAAO,IAAI,QAAJ,CAAa,MAAb,EAAqB,GAArB,CAAX;AACA,SAAK,MAAL,E,CAAc;;AAEd","file":"template-string.js","sourcesContent":["/**\r\n * 模板字符串\r\n */\r\n\r\n// 普通字符串\r\nconsole.log(`In JavaScript '\\n' is a line-feed.`)\r\n\r\n// 多行字符串\r\nconsole.log(`In JavaScript this is\r\n not legal.`);\r\n\r\nconsole.log(`string text line 1\r\nstring text line 2`);\r\n\r\n// 字符串中嵌入变量\r\nvar name = \"Bob\", time = \"today\";\r\nconsole.log(`Hello ${name}, how are you ${time}?`);\r\n\r\nfunction authorize(user, action) {\r\n    if (!user.hasPrivilege(action)) {\r\n        throw new Error(\r\n            // 传统写法为\r\n            // 'User '\r\n            // + user.name\r\n            // + ' is not authorized to do '\r\n            // + action\r\n            // + '.'\r\n            `User ${user.name} is not authorized to do ${action}.`);\r\n    }\r\n}\r\n\r\nvar x = 1;\r\nvar y = 2;\r\n\r\nconsole.log(`${x} + ${y} = ${x + y}`)\r\n// \"1 + 2 = 3\"\r\nconsole.log(`${x} + ${y * 2} = ${x + y * 2}`);\r\n// \"1 + 4 = 5\"\r\n\r\nvar obj = {x: 1, y: 2};\r\nconsole.log(`${obj.x + obj.y}`);\r\n// 3\r\n\r\n// 模板字符串甚至还能嵌套。\r\nconst tmpl = addrs => `\r\n  <table>\r\n  ${addrs.map(addr => `\r\n    <tr><td>${addr.first}</td></tr>\r\n    <tr><td>${addr.last}</td></tr>\r\n  `).join('==')}\r\n  </table>\r\n`;\r\n\r\nconst data = [\r\n    { first: '<Jane>', last: 'Bond' },\r\n    { first: 'Lars', last: '<Croft>' },\r\n];\r\n\r\nconsole.log(tmpl(data));\r\n\r\n// 写法一\r\n// let foo = new Function('a','b', 'Generator.prototype.return a+b');\r\n// console.log(foo(1,2));\r\n// new Function('arg1','arg2', 'statement1;statement2')\r\nlet str = 'return ' + '`Hello ${name}!`';\r\nlet func = new Function('name', str);\r\nfunc('Jack'); // \"Hello Jack!\"\r\n\r\n/*\r\n// 写法二\r\nlet str = '(name) => `Hello ${name}!`';\r\nlet func = eval.call(null, str);\r\nfunc('Jack') // \"Hello Jack!\"\r\n*/\r\n\r\n"]}