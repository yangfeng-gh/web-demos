{"version":3,"sources":["迭代.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,MAAI,IAAI,EAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,OAAO,CAAxB,EAAR;AACA,OAAK,IAAI,EAAT,IAAc,CAAd;AAAiB,YAAQ,GAAR,CAAY,EAAZ;AAAjB,G,CAAiC;AACjC;;AAEA;AACA,WAAS,OAAT,CAAiB,KAAjB,EAAwB;AACtB,QAAI,YAAY,KAAK,KAAL,CAAW,KAAX,CAAhB,CADsB,CACa;AACnC,WAAO;AACL,YAAM,gBAAY;AAChB,eAAO,WAAP;AACD;AAHI,KAAP,CAFsB,CAMnB;AACJ;;AAED,MAAI,wBAAwB,QAAQ,IAAR,CAA5B;AACA,MAAI,MAAM,sBAAsB,IAAtB,EAAV,C,CAAwC;AACxC,MAAI,MAAM,sBAAsB,IAAtB,EAAV,C,CAAwC;AACxC,UAAQ,GAAR,CAAY,GAAZ;;AAEA;AACA,WAAS,KAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB;AACvB,WAAO,EAAE;AACP,UAAI,GAAJ,GAAU;AACR,eAAO,GAAP;AACD,OAHI,EAGF;AACH,UAAI,GAAJ,GAAU;AACR,eAAO,GAAP;AACD,OANI,EAMF;AACH,gBAAU,kBAAU,CAAV,EAAa;AAAE;AACvB,eAAO,OAAO,CAAP,IAAY,KAAK,GAAxB;AACD,OATI;AAUL,gBAAU,oBAAY;AAAE;AACtB,eAAO,MAAM,GAAN,GAAY,GAAZ,GAAkB,GAAlB,GAAwB,GAA/B;AACD,OAZI;AAaL,oBAAc,wBAAY;AACxB,YAAI,MAAM,KAAK,IAAL,CAAU,GAAV,CAAV,CADwB,CACE;AAC1B,eAAO;AACL,gBAAM,gBAAY;AAChB,gBAAI,MAAM,GAAV,EACE,MAAM,aAAN;AACF,mBAAO,KAAP;AACD;AALI,SAAP;AAOD;AAtBI,KAAP;AAwBD;;AAED,OAAK,IAAI,CAAT,IAAc,MAAM,CAAN,EAAS,EAAT,CAAd;AAA4B,YAAQ,GAAR,CAAY,CAAZ;AAA5B,G,CAA4C;;AAE5C,mBAAmB,SAAS,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAT,CAAnB,EAA2C;AAAA;;AAAA,QAAjC,CAAiC;AAAA,QAA9B,CAA8B;;AACzC,YAAQ,GAAR,CAAY,IAAI,GAAJ,GAAU,CAAtB;AACD;;AAED,MAAI,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,CAAa;AAAb,GAAJ,CACA,OAAO,SAAP,CAAiB,CAAjB,GAAqB,CAArB,C,CAAwB;AACxB,OAAK,CAAL,IAAU,CAAV;AAAa,YAAQ,GAAR,CAAY,CAAZ;AAAb,G,CAA6B;AAC7B,OAAK,CAAL,IAAU,SAAS,CAAT,EAAY,IAAZ,CAAV;AAA6B,YAAQ,GAAR,CAAY,CAAZ;AAA7B,G,CAA6C","file":"迭代.js","sourcesContent":["/**\n * 迭代\n */\nlet o = {one: 1, two: 2, three: 3};\nfor (let p in o) console.log(p); //for/in:输出'one','two','three'\n//for each (let v in o) console.log(v); //for/each:输出1~3\n\n//返回迭代器的一个函数\nfunction counter(start) {\n  let nextValue = Math.round(start); //表示迭代器的一个私有状态\n  return {\n    next: function () {\n      return nextValue++;\n    }\n  }; //返回迭代器对象\n}\n\nlet serialNumberGenerator = counter(1000);\nlet sn1 = serialNumberGenerator.next(); //1000\nlet sn2 = serialNumberGenerator.next(); //1001\nconsole.log(sn2);\n\n//返回一个可迭代的对象，用以表示该范围内的一个数字\nfunction range(min, max) {\n  return { //返回一个表示这个范围的对象\n    get min() {\n      return min;\n    }, //范围边界是固定的\n    get max() {\n      return max;\n    }, //并在闭包内保存起来\n    includes: function (x) { //检测成员是否属于这个范围\n      return min <= x && x <= max;\n    },\n    toString: function () { //以字符串形式输出这个范围\n      return \"[\" + min + \",\" + max + \"]\";\n    },\n    __iterator__: function () {\n      let val = Math.ceil(min); //将当前位置保存在闭包中\n      return {\n        next: function () {\n          if (val > max)\n            throw StopIteration;\n          return val++;\n        }\n      };\n    }\n  };\n}\n\nfor (let i in range(1, 10)) console.log(i); //在firefox输出1~10之间的数字\n\nfor (let [k, v] in Iterator({a: 1, b: 2})) {\n  console.log(k + \"=\" + v);\n}\n\no = {x: 1, y: 2} //定义一个对象，它有两个属性\nObject.prototype.z = 3; //所有的对象都继承了z\nfor (p in o) console.log(p); //firefox输出\"x\",\"y\",\"z\"\nfor (p in Iterator(o, true)) console.log(p); //firefox输出\"x\",\"y\"\n"]}