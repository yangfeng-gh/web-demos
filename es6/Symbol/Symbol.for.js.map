{"version":3,"sources":["Symbol.for.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AASA,MAAI,KAAK,mBAAW,KAAX,CAAT;AACA,MAAI,KAAK,mBAAW,KAAX,CAAT;;AAEA,SAAO,EAAP,C,CAAU;;AAEV;;;AAGA,MAAI,KAAK,mBAAW,KAAX,CAAT;AACA,wBAAc,EAAd,E,CAAkB;;AAElB,MAAI,KAAK,sBAAO,KAAP,CAAT;AACA,wBAAc,EAAd,E,CAAkB","file":"Symbol.for.js","sourcesContent":["/**\r\n * 有时，我们希望重新使用同一个Symbol值，Symbol.for方法可以做到这一点\r\n * 它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。\r\n * 如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。\r\n * \r\n * Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。\r\n * 它们的区别是，前者会被登记在全局环境中供搜索，后者不会。\r\n */\r\n\r\nvar s1 = Symbol.for('foo');\r\nvar s2 = Symbol.for('foo');\r\n\r\ns1 === s2 // true\r\n\r\n/**\r\n * Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。\r\n */\r\nvar s1 = Symbol.for(\"foo\");\r\nSymbol.keyFor(s1) // \"foo\"\r\n\r\nvar s2 = Symbol(\"foo\");\r\nSymbol.keyFor(s2) // undefined"]}