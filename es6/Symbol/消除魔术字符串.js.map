{"version":3,"sources":["消除魔术字符串.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA;;;AAGA;AACA;AACA;;AAEA,WAAS,OAAT,CAAiB,KAAjB,EAAwB,OAAxB,EAAiC;AAC/B,QAAI,OAAO,CAAX;AACA,YAAQ,KAAR;AACE,WAAK,UAAU,QAAf;AACE,eAAO,KAAK,QAAQ,KAAb,GAAqB,QAAQ,MAApC;AACA;AAHJ;AAKA,WAAO,IAAP;AACD;;AAED,UAAQ,UAAU,QAAlB,EAA4B,EAAE,OAAO,GAAT,EAAc,QAAQ,GAAtB,EAA5B;;AAEA;;AAEA;AACA;;AAEA,MAAM,YAAY;AAChB,cAAU;AADM,GAAlB","file":"消除魔术字符串.js","sourcesContent":["/**\r\n * 魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。\r\n * 风格良好的代码，应该尽量消除魔术字符串，该由含义清晰的变量代替。\r\n */\r\n\r\n/**\r\n * 常用的消除魔术字符串的方法，就是把它写成一个变量\r\n */\r\n// var shapeType = {\r\n//   triangle: 'Triangle'\r\n// };\r\n\r\nfunction getArea(shape, options) {\r\n  var area = 0;\r\n  switch (shape) {\r\n    case shapeType.triangle:\r\n      area = .5 * options.width * options.height;\r\n      break;\r\n  }\r\n  return area;\r\n}\r\n\r\ngetArea(shapeType.triangle, { width: 100, height: 100 });\r\n\r\n// 上面代码中，我们把“Triangle”写成shapeType对象的triangle属性，这样就消除了强耦合。\r\n\r\n// 如果仔细分析，可以发现shapeType.triangle等于哪个值并不重要，只要确保不会跟其他shapeType属性的值冲突即可。\r\n// 因此，这里就很适合改用Symbol值。\r\n\r\nconst shapeType = {\r\n  triangle: Symbol()\r\n};"]}